/**
 *
 *  Ring Floodlight Cam Siren Control
 * 
 *  Needs the refresh_token and the device ID of the device. 
 *  This needs to be sourced by an API call to
 *  https://api.ring.com/clients_api/ring_devices?api_version=9
 *  and https://oauth.ring.com/oauth/token
 *  
 *  I used https://philipnye.com/2017/12/29/control-your-ring-spotlight-with-alexa-with-smart-things/ as a guide to build the requests.
 *  Author: Adam
 *
 */
metadata {
	definition (name: "Ring Floodlight Siren", namespace: "adamuser", author: "Adam") {
		capability "Actuator"
		capability "Switch"
		capability "Sensor"
	}

	// simulator metadata
	simulator {
	}

	// UI tile definitions
	tiles {
		standardTile("button", "device.switch", width: 2, height: 2, canChangeIcon: true) {
			state "off", label: 'Off', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState: "on"
			state "on", label: 'On', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC", nextState: "off"
		}
		main "button"
		details "button"
	}
    preferences {

        //Enter Device ID from PHP login page
        input "deviceid", "text", title: "Device ID", description: "The numeric value that identifies the device", displayDuringSetup: true, required: true
    }
}

def parse(String description) {
}

def authenticate() 
{
    def refreshtokl = "EMPTY"
    if (state.refreshtok == null)
    {
    //Enter Refresh Token From PHP Login Page
    refreshtokl = "ENTER REFRESH TOKEN HERE!!!!!!!!"
    }
    else 
    {
    refreshtokl = state.refreshtok

    }
    log.debug "refresh token: ${refreshtokl}"
    def token = "EMPTY"
    def params = [
    	uri: "https://oauth.ring.com",
    	path: "/oauth/token",
        headers: [
            "User-Agent": "iOS"
    	],
        
        requestContentType: "application/json",
        body: "{\"grant_type\": \"refresh_token\", \"refresh_token\": \"${refreshtokl}\"}"
	]
    try {
        httpPost(params) { resp ->
            log.debug "POST response code: ${resp.status}"
            
            log.debug "response data: ${resp.data}"
            token = resp.data.access_token
            state.refreshtok = resp.data.refresh_token
        }
    } catch (e) {
        log.error "HTTP Exception Received on POST: $e"
        log.error "response data: ${resp.data}"
        return
        
    }
    

    return token
}

def on() {
	
    log.debug "Attempting to Switch On."
    def token = authenticate()
    //Send Command to Turn On
    log.debug "the token is ${token} end"
    def paramsforPut = [
    	uri: "https://api.ring.com",
    	path: "/clients_api/doorbots/${deviceid}/siren_on",
       headers: [
        	Authorization: "Bearer ${token}"
    	],
        query: [
        	api_version: "9"
    	]
	]
    try {
    log.debug "PUT response code: ${paramsforPut}"
        httpPut(paramsforPut) { resp ->
        }
        
    } catch (e) {
        //ALWAYS seems to throw an exception?
        //Platform bug maybe? 
        log.debug "HTTP Exception Received on PUT: $e"
    }
    sendEvent(name: "switch", value: "on")
}

def off() {

    log.debug "Attempting to Switch Off"
    def token = authenticate()
    
    //Send Command to Turn Off
    def paramsforPut = [
    	uri: "https://api.ring.com",
    	path: "/clients_api/doorbots/${deviceid}/siren_off",
        headers: [
        	Authorization: "Bearer ${token}"
    	],
        query: [
        	api_version: "9"
    	]
	]
    try {
        log.debug "PUT response code: ${paramsforPut}"
        httpPut(paramsforPut) { resp ->
 
        }
        
    } catch (e) {
        //ALWAYS seems to throw an exception?
        //Platform bug maybe? 
        log.debug "HTTP Exception Received on PUT: $e"
    }
	log.debug "Switched OFF!"
    sendEvent(name: "switch", value: "off")
}